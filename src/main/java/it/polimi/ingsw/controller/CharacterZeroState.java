package it.polimi.ingsw.controller;

import it.polimi.ingsw.exceptions.GameException;

import it.polimi.ingsw.messages.events.GameEventType;
import it.polimi.ingsw.messages.GameEvent;

import it.polimi.ingsw.messages.events.MoveStudentFromCardToIslandEvent;
import it.polimi.ingsw.model.CharacterCard;
import it.polimi.ingsw.model.Color;

/**
 * This is the state generated by the card 0 ({@link it.polimi.ingsw.model.CharacterCardZero}).
 * When the MOVE_STUDENT_FROM_CARD_TO_ISLAND event is received it moves the indicated student to the indicated island.
 * Then it draws a new student from the bag and puts it into the card.
 */
public class CharacterZeroState extends CharacterState {

    Color color;
    int islandIndex;

    CharacterCard cc;

    GameState nextState;

    public CharacterZeroState(RoundController context, int numberOfEvents, GameState nextState, CharacterCard cc) {
        super(context, numberOfEvents);
        this.nextState = nextState;
        this.cc =cc;
        color = null;
        islandIndex = -1;
    }

    @Override
    public boolean checkValidEvent(GameEvent event) {
        return event.getEventType() == GameEventType.MOVE_STUDENT_FROM_CARD_TO_ISLAND;
    }
    @Override
    public void executeEvent(GameEvent event) throws GameException {

                MoveStudentFromCardToIslandEvent eventCast = (MoveStudentFromCardToIslandEvent) event;
                this.color=eventCast.getStudentFromCard();
                this.islandIndex=eventCast.getIslandIndex();

                if(color == null || (islandIndex<0 || islandIndex > context.gameManager.getIslands().size() )){
                    throw new GameException("wrong parameters");
                }

                try {
                    cc.getStudentHolder().moveStudentTo(color, context.gameManager.getIslands().get(islandIndex));
                    Color newColor =  context.gameManager.getBag().extractRandomStudent();
                    cc.getStudentHolder().addStudent(newColor);
                    context.gameManager.getModelObserver().moveStudentFromCardToIsland(islandIndex, color);
                    context.gameManager.getModelObserver().addStudentToCard(0, newColor);

                } catch (GameException ignored) {
                    //in this context this is impossible
                }

                context.changeState(nextState);

        }
    }

